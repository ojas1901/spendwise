import os

import requests
import csv

import io

from google.cloud.speech_v1 import SpeechClient
from google.oauth2 import service_account
from google.cloud import speech

CURRENCY_API_KEY = '4YOHN3QHDBARIJEX'


def real_time_currency_convert(from_currency, to_currency):
    """
        Queries Alpha Vantage API to find out live currency exchange rates

        :param from_currency: Currency to convert from
        :type: str
        :param to_currency: Currency to convert to
        :type: str
        :return: Live exchange rate from from_currency to to_currency
        :rtype: float
    """
    # importing required libraries

    function = 'CURRENCY_EXCHANGE_RATE'
    # base_url variable store base url

    # main_url variable store complete url
    main_url = f'https://www.alphavantage.co/query?function={function}&from_currency={from_currency}&to_currency={to_currency}&apikey={CURRENCY_API_KEY}'

    req_ob = requests.get(main_url)

    dict_outer_key = "Realtime Currency Exchange Rate"
    dict_inner_key = "5. Exchange Rate"

    result = req_ob.json()[dict_outer_key][dict_inner_key]

    return round(float(result), 2)


def export_to_csv(content, header, path):
    """
    This is a function which helps to export the given content with the given header to csv. It will create a new file
    at the given path

    :param content: list of content
    :type: [[str]]
    :param header: Header List
    :type: [str]
    :param path: Path to save the file
    :type: str
    :return: CSV File
    :rtype: object
    """
    with open(path, 'w', newline='') as csvfile:
        writer = csv.writer(csvfile, delimiter=',')
        writer.writerow(header)
        writer.writerows(content)
    return open(path, 'rb')


def get_file_path(file_id: str):
    """
    Use the telegram public API to get the file path of the given file id

    :param file_id: The file_id generated by telegram when it recieves a file
    :type: str
    :return: File Path on the telegram public API
    :rtype: str
    """
    api_token = os.environ["API_TOKEN"]
    url = f"https://api.telegram.org/bot{api_token}/getFile?file_id={file_id}"
    response = requests.get(url).json()
    return response["result"]["file_path"]


def generate_audio_file(file_path: str):
    """
    Use the telegram public API to get the audio file located at a file path

    :param file_path: The path of the file where it can be located by telegram
    :type: str
    :return: The name of the audio file which is saved
    :rtype: str
    """
    api_token = os.environ["API_TOKEN"]
    url = f"https://api.telegram.org/file/bot{api_token}/{file_path}"
    path_str = file_path.split('/')
    response = requests.get(url)
    with open('temp.oga', 'wb') as file:
        file.write(response.content)
    return 'temp.oga'


def transcribe_audio(path: str):
    """
    Transcribes the given speech to text using the Google speech to text API. File has to be in .oga or .ogg format

    :param path: The path of the audio file
    :type: str
    :return: The most confident transcription of the audio
    :rtype: str
    """
    client_file = 'src/service_account.json'
    credentials = service_account.Credentials.from_service_account_file(client_file)
    client = speech.SpeechClient(credentials=credentials)

    with io.open(path, 'rb') as f:
        content = f.read()
        audio = speech.RecognitionAudio(content=content)

    config = speech.RecognitionConfig(
        encoding=speech.RecognitionConfig.AudioEncoding.OGG_OPUS,
        sample_rate_hertz=48000,
        language_code='en-US',
    )

    response = client.recognize(config=config, audio=audio)
    if not response.results:
        return ""
    for result in response.results:
        return result.alternatives[0].transcript
    return ""
